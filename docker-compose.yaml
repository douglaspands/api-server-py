version: "3"
services:

    apiserver-nginx:
        image: nginx:1.20.1-alpine
        container_name: apiserver-nginx
        ports: 
            - 8000:80
        depends_on:
            - apiserver-fastapi
        command: [nginx-debug, '-g', 'daemon off;']
        volumes:
            - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro

    apiserver-fastapi:
        image: apiserver-fastapi:latest
        container_name: apiserver-fastapi
        build: .
        restart: on-failure
        environment:
            POSTGRES_SERVER: apiserver-pgbouncer
            POSTGRES_PORT: 5432
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: docker
            POSTGRES_DB: apiserver
            WORKERS_PER_CORE: 0.5
            PYTHONDONTWRITEBYTECODE: 1
        # ports:
        #     - 8000:8000
        depends_on:
            - apiserver-pgbouncer
        volumes:
            - ./scripts/start-reload.sh:/app/start.sh:ro
            - ./app:/app/app
            - ./migrations:/app/migrations

    apiserver-pgbouncer:
        image: edoburu/pgbouncer:1.15.0
        container_name: apiserver-pgbouncer
        environment:
            DB_USER: postgres
            DB_PASSWORD: docker
            DB_HOST: apiserver-postgres
            DB_NAME: apiserver
        ports:
            - 5432:5432
        depends_on:
            - apiserver-postgres

    apiserver-postgres:
        image: postgres:13.3-alpine
        container_name: apiserver-postgres
        command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr", "-c", "log_duration=on"]
        volumes:
            - apiserver-pgdata:/var/lib/postgresql/data
        environment:
            POSTGRES_HOST_AUTH_METHOD: trust
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: docker
            POSTGRES_DB: apiserver
        # ports:
        #     - 5432:5432

volumes:
    apiserver-pgdata:
